# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop", "feature/#102" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Develop
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle wrapper 실행권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # docker Login
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Build & Push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Docker Build and push
        uses: docker/build-push-action@v5.0.0
        with:
          build-args: ${{ vars.SPRING_PROFILE }} # Dockerfile의 ARG로 넘어감
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/challang-api

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker_compose
          path: ./docker-compose.yml

  deploy:
    needs: build
    runs-on: self-hosted
    environment: Develop
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      FRONT_CALLBACK: ${{ secrets.FRONT_CALLBACK }}
      GOOGLE_CLIENT: ${{ secrets.GOOGLE_CLIENT }}
      GOOGLE_REDIRECT: ${{ secrets.GOOGLE_REDIRECT }}
      GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      KAKAO_CLIENT: ${{ secrets.KAKAO_CLIENT }}
      KAKAO_REDIRECT: ${{ secrets.KAKAO_REDIRECT }}
      KAKAO_SECRET: ${{ secrets.KAKAO_SECRET }}
      NAVER_CLIENT: ${{ secrets.NAVER_CLIENT }}
      NAVER_REDIRECT: ${{ secrets.NAVER_REDIRECT }}
      NAVER_SECRET: ${{ secrets.NAVER_SECRET }}
      REFRESH_EXP: ${{ secrets.REFRESH_EXP }}
      CORS_PERMIT_URL: ${{ secrets.CORS_PERMIT_URL }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      DISCORD_WEBHOOK_URI: ${{ secrets.DISCORD_WEBHOOK_URI }}
      REDIS_PORT: ${{secrets.REDIS_PORT}}
      REDIS_PASSWORD: ${{secrets.REDIS_PASSWORD}}
      DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
      CLOUD_FRONT_URL: ${{secrets.CLOUD_FRONT_URL}}

    steps:
      # 커스텀 image pull
      - name: docker pull
        run: sudo docker pull $DOCKER_USERNAME/challang-api

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker_compose

      # Docker Compose Up
      - name: docker compose up
        run: |
          echo "${{ secrets.APP_ENVIRONMENT }}" > dev.env
          docker-compose down
          docker-compose up -d

      # 미사용 이미지 정리
      - name: delete old docker image
        run: sudo docker system prune -f