# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Develop
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # gradle wrapper 실행권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # gradle build
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # docker Login
    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Docker Build & Push
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.0.0

    - name: Docker Build and push
      uses: docker/build-push-action@v5.0.0
      with:
        build-args: ${{ vars.SPRING_PROFILE }} # Dockerfile의 ARG로 넘어감
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/challang-api

  deploy:
    needs: build
    runs-on: self-hosted
    environment: Develop
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      FRONT_REDIRECT: ${{ secrets.FRONT_REDIRECT }}
      GOOGLE_CLIENT: ${{ secrets.GOOGLE_CLIENT }}
      GOOGLE_REDIRECT: ${{ secrets.GOOGLE_REDIRECT }}
      GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      KAKAO_CLIENT: ${{ secrets.KAKAO_CLIENT }}
      KAKAO_REDIRECT: ${{ secrets.KAKAO_REDIRECT }}
      KAKAO_SECRET: ${{ secrets.KAKAO_SECRET }}
      NAVER_CLIENT: ${{ secrets.NAVER_CLIENT }}
      NAVER_REDIRECT: ${{ secrets.NAVER_REDIRECT }}
      NAVER_SECRET: ${{ secrets.NAVER_SECRET }}
      REFRESH_EXP: ${{ secrets.REFRESH_EXP }}

    steps:
      # 커스텀 image pull
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/challang-api

      # 존재하는 컨테이너 stop
      - name: docker stop container
        run: | 
          sudo docker stop $(sudo docker ps -f "name=challang-api" -a -q) 2>/dev/null || true
          sudo docker rm $(sudo docker ps -f "name=challang-api" -a -q) 2>/dev/null || true 

      # 받아온 이미지 컨테이너 실행
      - name: docker run new container
        run: |
          echo "${{ secrets.APP_ENVIRONMENT }}" > dev.env
          sudo docker run --name challang-api --network=challang-network --env-file=dev.env --restart=always -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/challang-api

      # 미사용 이미지 정리
      - name: delete old docker image
        run: sudo docker system prune -f